// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String @id @default(uuid())
  name      String
  slug      String
  image_url String

  products Product[]
}

model Product {
  id                  String         @id @default(uuid())
  name                String
  slug                String
  description         String
  base_price          Decimal        @db.Decimal(8, 2)
  discount_percentage Int            @default(0)
  image_urls          String[]
  category            Category       @relation(fields: [category_id], references: [id])
  category_id         String
  order_products      OrderProduct[]
}

model Order {
  id             String         @id @default(uuid())
  status         OrderStatus    @default(WAITING_FOR_PAYMENT)
  user_id        String
  user           User           @relation(fields: [user_id], references: [id])
  order_products OrderProduct[]
  created_at     DateTime       @default(now())
  updated_at     DateTime       @default(now()) @updatedAt
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  PAYMENT_CONFIRMED
}

model OrderProduct {
  id                  String  @id @default(uuid())
  base_price          Decimal @db.Decimal(8, 2)
  discount_percentage Int     @default(0)
  quantity            Int
  product_id          String
  product             Product @relation(fields: [product_id], references: [id])
  order_id            String
  order               Order   @relation(fields: [order_id], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Order         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
